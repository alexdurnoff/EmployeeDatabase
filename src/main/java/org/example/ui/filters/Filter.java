package org.example.ui.filters;

import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.sql.SQLException;
import java.util.List;


/**
 * Одна из панелей фильтрации, которые собираются в VBox
 * на панели списка сотрудников. По нажатию на кнопку "Добавить фильр"
 * будет выдавать список идентификаторов сотрудников, отобранных по
 * какому-то параметру. По нажатию кнопки "Отмена" сам фильтр очищает свое поле ввода,
 * а остальные фильры должны пересчитываться, поскольку идентификаторы могут совпадать.
 * Интерфейс будет отдавать свои кнопки "Применить" и "Отмена" в панель сотрудников
 * для перерисовки списка сотруджников. И надо отдавать HBox, чтобы можно было запихнуть
 * в панель списка пользователей.
 */
public interface Filter {
    /**
     * Возвращает идентификаторы сотрудников.
     * @return List<Integer>> - список идентификаторов сотрудников.
     */
    List<Integer> employeeIdList() throws SQLException;

    /**
     * Кнопка "Применить". При нажатии на эту кнопку панель списка будет забирать
     * значение employeeId. Настройка setOnAction кнопки будет производиться из панели сотрудников.
     * @return Button applyButton.
     */
    Button applyButton();

    /**
     * Кнопка отмена. Передается в панель списка сотрудников. По ее нажатию списко сотрудников пересчитывается заново,
     * а наш фильтр очищается, вызывая метод clear.
     * @return Button cancelButton.
     */
    Button cancelButton();

    /**
     * Очищает значение employeeId и соответствующее поле ввода для взаимодействия с пользователем.
     */
    void clear();

    /**
     * Возвращает HBox для взаимодействия с пользователем, который запихиваем в панель списка сотрудников.
     * @return HBox hBox.
     */
    HBox hbox();

    /**
     * Название фильра. Для Label в начале строки
     */
    String labelName();

}
